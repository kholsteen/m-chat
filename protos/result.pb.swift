/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: result.proto
 *
 */

import Foundation
import SwiftProtobuf


public struct Otsimo_QuestionResult: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Otsimo_QuestionResult"}
  public var protoMessageName: String {return "QuestionResult"}
  public var protoPackageName: String {return "otsimo"}
  public var jsonFieldNames: [String: Int] {return [
    "id": 1,
    "answer": 2,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "id": 1,
    "answer": 2,
  ]}

  public var id: String = ""

  public var answer: String = ""

  public init() {}

  public init(id: String? = nil,
    answer: String? = nil)
  {
    if let v = id {
      self.id = v
    }
    if let v = answer {
      self.answer = v
    }
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &id)
    case 2: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &answer)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if id != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: id, protoFieldNumber: 1, protoFieldName: "id", jsonFieldName: "id", swiftFieldName: "id")
    }
    if answer != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: answer, protoFieldNumber: 2, protoFieldName: "answer", jsonFieldName: "answer", swiftFieldName: "answer")
    }
  }

  public func _protoc_generated_isEqualTo(other: Otsimo_QuestionResult) -> Bool {
    if id != other.id {return false}
    if answer != other.answer {return false}
    return true
  }
}

public struct Otsimo_StepResult: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Otsimo_StepResult"}
  public var protoMessageName: String {return "StepResult"}
  public var protoPackageName: String {return "otsimo"}
  public var jsonFieldNames: [String: Int] {return [
    "id": 2,
    "stepResult": 1,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "id": 2,
    "stepResult": 1,
  ]}

  public var id: String = ""

  public var stepResult: [Otsimo_QuestionResult] = []

  public init() {}

  public init(id: String? = nil,
    stepResult: [Otsimo_QuestionResult] = [])
  {
    if let v = id {
      self.id = v
    }
    if !stepResult.isEmpty {
      self.stepResult = stepResult
    }
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 2: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &id)
    case 1: handled = try setter.decodeRepeatedMessageField(fieldType: Otsimo_QuestionResult.self, value: &stepResult)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if !stepResult.isEmpty {
      try visitor.visitRepeatedMessageField(value: stepResult, protoFieldNumber: 1, protoFieldName: "stepResult", jsonFieldName: "stepResult", swiftFieldName: "stepResult")
    }
    if id != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: id, protoFieldNumber: 2, protoFieldName: "id", jsonFieldName: "id", swiftFieldName: "id")
    }
  }

  public func _protoc_generated_isEqualTo(other: Otsimo_StepResult) -> Bool {
    if id != other.id {return false}
    if stepResult != other.stepResult {return false}
    return true
  }
}

public struct Otsimo_Result: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Otsimo_Result"}
  public var protoMessageName: String {return "Result"}
  public var protoPackageName: String {return "otsimo"}
  public var jsonFieldNames: [String: Int] {return [
    "info": 1,
    "device": 2,
    "duration": 3,
    "stepResults": 4,
    "version": 5,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "info": 1,
    "device": 2,
    "duration": 3,
    "stepResults": 4,
    "version": 5,
  ]}

  private class _StorageClass {
    typealias ProtobufExtendedMessage = Otsimo_Result
    var _info: Otsimo_Info? = nil
    var _device: Otsimo_DeviceInfo? = nil
    var _duration: Int64 = 0
    var _stepResults: [Otsimo_StepResult] = []
    var _version: Int32 = 0

    init() {}

    func decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
      let handled: Bool
      switch protoFieldNumber {
      case 1: handled = try setter.decodeSingularMessageField(fieldType: Otsimo_Info.self, value: &_info)
      case 2: handled = try setter.decodeSingularMessageField(fieldType: Otsimo_DeviceInfo.self, value: &_device)
      case 3: handled = try setter.decodeSingularField(fieldType: ProtobufInt64.self, value: &_duration)
      case 4: handled = try setter.decodeRepeatedMessageField(fieldType: Otsimo_StepResult.self, value: &_stepResults)
      case 5: handled = try setter.decodeSingularField(fieldType: ProtobufInt32.self, value: &_version)
      default:
        handled = false
      }
      return handled
    }

    func traverse(visitor: inout ProtobufVisitor) throws {
      if let v = _info {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1, protoFieldName: "info", jsonFieldName: "info", swiftFieldName: "info")
      }
      if let v = _device {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 2, protoFieldName: "device", jsonFieldName: "device", swiftFieldName: "device")
      }
      if _duration != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt64.self, value: _duration, protoFieldNumber: 3, protoFieldName: "duration", jsonFieldName: "duration", swiftFieldName: "duration")
      }
      if !_stepResults.isEmpty {
        try visitor.visitRepeatedMessageField(value: _stepResults, protoFieldNumber: 4, protoFieldName: "stepResults", jsonFieldName: "stepResults", swiftFieldName: "stepResults")
      }
      if _version != 0 {
        try visitor.visitSingularField(fieldType: ProtobufInt32.self, value: _version, protoFieldNumber: 5, protoFieldName: "version", jsonFieldName: "version", swiftFieldName: "version")
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _info != other._info {return false}
      if _device != other._device {return false}
      if _duration != other._duration {return false}
      if _stepResults != other._stepResults {return false}
      if _version != other._version {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._info = _info
      clone._device = _device
      clone._duration = _duration
      clone._stepResults = _stepResults
      clone._version = _version
      return clone
    }
  }

  private var _storage = _StorageClass()

  public var info: Otsimo_Info {
    get {return _storage._info ?? Otsimo_Info()}
    set {_uniqueStorage()._info = newValue}
  }

  public var device: Otsimo_DeviceInfo {
    get {return _storage._device ?? Otsimo_DeviceInfo()}
    set {_uniqueStorage()._device = newValue}
  }

  public var duration: Int64 {
    get {return _storage._duration}
    set {_uniqueStorage()._duration = newValue}
  }

  public var stepResults: [Otsimo_StepResult] {
    get {return _storage._stepResults}
    set {_uniqueStorage()._stepResults = newValue}
  }

  public var version: Int32 {
    get {return _storage._version}
    set {_uniqueStorage()._version = newValue}
  }

  public init() {}

  public init(info: Otsimo_Info? = nil,
    device: Otsimo_DeviceInfo? = nil,
    duration: Int64? = nil,
    stepResults: [Otsimo_StepResult] = [],
    version: Int32? = nil)
  {
    let storage = _uniqueStorage()
    storage._info = info
    storage._device = device
    if let v = duration {
      storage._duration = v
    }
    if !stepResults.isEmpty {
      storage._stepResults = stepResults
    }
    if let v = version {
      storage._version = v
    }
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    return try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Otsimo_Result) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

public struct Otsimo_DeviceInfo: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Otsimo_DeviceInfo"}
  public var protoMessageName: String {return "DeviceInfo"}
  public var protoPackageName: String {return "otsimo"}
  public var jsonFieldNames: [String: Int] {return [
    "vendorId": 1,
    "bundleIdentifier": 3,
    "bundleVersion": 4,
    "bundleShortVersion": 5,
    "deviceType": 6,
    "deviceName": 7,
    "osName": 8,
    "systemVersion": 9,
    "languageCode": 10,
    "countryCode": 11,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "vendorId": 1,
    "bundleIdentifier": 3,
    "bundleVersion": 4,
    "bundleShortVersion": 5,
    "deviceType": 6,
    "deviceName": 7,
    "osName": 8,
    "systemVersion": 9,
    "languageCode": 10,
    "countryCode": 11,
  ]}

  public var vendorId: String = ""

  public var bundleIdentifier: String = ""

  public var bundleVersion: String = ""

  public var bundleShortVersion: String = ""

  public var deviceType: String = ""

  public var deviceName: String = ""

  public var osName: String = ""

  public var systemVersion: String = ""

  public var languageCode: String = ""

  public var countryCode: String = ""

  public init() {}

  public init(vendorId: String? = nil,
    bundleIdentifier: String? = nil,
    bundleVersion: String? = nil,
    bundleShortVersion: String? = nil,
    deviceType: String? = nil,
    deviceName: String? = nil,
    osName: String? = nil,
    systemVersion: String? = nil,
    languageCode: String? = nil,
    countryCode: String? = nil)
  {
    if let v = vendorId {
      self.vendorId = v
    }
    if let v = bundleIdentifier {
      self.bundleIdentifier = v
    }
    if let v = bundleVersion {
      self.bundleVersion = v
    }
    if let v = bundleShortVersion {
      self.bundleShortVersion = v
    }
    if let v = deviceType {
      self.deviceType = v
    }
    if let v = deviceName {
      self.deviceName = v
    }
    if let v = osName {
      self.osName = v
    }
    if let v = systemVersion {
      self.systemVersion = v
    }
    if let v = languageCode {
      self.languageCode = v
    }
    if let v = countryCode {
      self.countryCode = v
    }
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &vendorId)
    case 3: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &bundleIdentifier)
    case 4: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &bundleVersion)
    case 5: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &bundleShortVersion)
    case 6: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &deviceType)
    case 7: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &deviceName)
    case 8: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &osName)
    case 9: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &systemVersion)
    case 10: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &languageCode)
    case 11: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &countryCode)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if vendorId != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: vendorId, protoFieldNumber: 1, protoFieldName: "vendorId", jsonFieldName: "vendorId", swiftFieldName: "vendorId")
    }
    if bundleIdentifier != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: bundleIdentifier, protoFieldNumber: 3, protoFieldName: "bundleIdentifier", jsonFieldName: "bundleIdentifier", swiftFieldName: "bundleIdentifier")
    }
    if bundleVersion != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: bundleVersion, protoFieldNumber: 4, protoFieldName: "bundleVersion", jsonFieldName: "bundleVersion", swiftFieldName: "bundleVersion")
    }
    if bundleShortVersion != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: bundleShortVersion, protoFieldNumber: 5, protoFieldName: "bundleShortVersion", jsonFieldName: "bundleShortVersion", swiftFieldName: "bundleShortVersion")
    }
    if deviceType != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: deviceType, protoFieldNumber: 6, protoFieldName: "deviceType", jsonFieldName: "deviceType", swiftFieldName: "deviceType")
    }
    if deviceName != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: deviceName, protoFieldNumber: 7, protoFieldName: "deviceName", jsonFieldName: "deviceName", swiftFieldName: "deviceName")
    }
    if osName != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: osName, protoFieldNumber: 8, protoFieldName: "osName", jsonFieldName: "osName", swiftFieldName: "osName")
    }
    if systemVersion != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: systemVersion, protoFieldNumber: 9, protoFieldName: "systemVersion", jsonFieldName: "systemVersion", swiftFieldName: "systemVersion")
    }
    if languageCode != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: languageCode, protoFieldNumber: 10, protoFieldName: "languageCode", jsonFieldName: "languageCode", swiftFieldName: "languageCode")
    }
    if countryCode != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: countryCode, protoFieldNumber: 11, protoFieldName: "countryCode", jsonFieldName: "countryCode", swiftFieldName: "countryCode")
    }
  }

  public func _protoc_generated_isEqualTo(other: Otsimo_DeviceInfo) -> Bool {
    if vendorId != other.vendorId {return false}
    if bundleIdentifier != other.bundleIdentifier {return false}
    if bundleVersion != other.bundleVersion {return false}
    if bundleShortVersion != other.bundleShortVersion {return false}
    if deviceType != other.deviceType {return false}
    if deviceName != other.deviceName {return false}
    if osName != other.osName {return false}
    if systemVersion != other.systemVersion {return false}
    if languageCode != other.languageCode {return false}
    if countryCode != other.countryCode {return false}
    return true
  }
}

public struct Otsimo_Info: ProtobufGeneratedMessage {
  public var swiftClassName: String {return "Otsimo_Info"}
  public var protoMessageName: String {return "Info"}
  public var protoPackageName: String {return "otsimo"}
  public var jsonFieldNames: [String: Int] {return [
    "age": 1,
    "gender": 2,
    "relation": 3,
  ]}
  public var protoFieldNames: [String: Int] {return [
    "age": 1,
    "gender": 2,
    "relation": 3,
  ]}

  public var age: String = ""

  public var gender: String = ""

  public var relation: String = ""

  public init() {}

  public init(age: String? = nil,
    gender: String? = nil,
    relation: String? = nil)
  {
    if let v = age {
      self.age = v
    }
    if let v = gender {
      self.gender = v
    }
    if let v = relation {
      self.relation = v
    }
  }

  public mutating func _protoc_generated_decodeField(setter: inout ProtobufFieldDecoder, protoFieldNumber: Int) throws -> Bool {
    let handled: Bool
    switch protoFieldNumber {
    case 1: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &age)
    case 2: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &gender)
    case 3: handled = try setter.decodeSingularField(fieldType: ProtobufString.self, value: &relation)
    default:
      handled = false
    }
    return handled
  }

  public func _protoc_generated_traverse(visitor: inout ProtobufVisitor) throws {
    if age != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: age, protoFieldNumber: 1, protoFieldName: "age", jsonFieldName: "age", swiftFieldName: "age")
    }
    if gender != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: gender, protoFieldNumber: 2, protoFieldName: "gender", jsonFieldName: "gender", swiftFieldName: "gender")
    }
    if relation != "" {
      try visitor.visitSingularField(fieldType: ProtobufString.self, value: relation, protoFieldNumber: 3, protoFieldName: "relation", jsonFieldName: "relation", swiftFieldName: "relation")
    }
  }

  public func _protoc_generated_isEqualTo(other: Otsimo_Info) -> Bool {
    if age != other.age {return false}
    if gender != other.gender {return false}
    if relation != other.relation {return false}
    return true
  }
}
