// Code generated by protoc-gen-gogo.
// source: m-chat.proto
// DO NOT EDIT!

/*
	Package mchatpb is a generated protocol buffer package.

	It is generated from these files:
		m-chat.proto

	It has these top-level messages:
		Answer
		Query
		YesNoQuestion
		GroupQuestion
		Question
		Step
*/
package mchatpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ResultType int32

const (
	ResultType_PASS        ResultType = 0
	ResultType_FAIL        ResultType = 1
	ResultType_ASK_ANOTHER ResultType = 2
)

var ResultType_name = map[int32]string{
	0: "PASS",
	1: "FAIL",
	2: "ASK_ANOTHER",
}
var ResultType_value = map[string]int32{
	"PASS":        0,
	"FAIL":        1,
	"ASK_ANOTHER": 2,
}

func (x ResultType) String() string {
	return proto.EnumName(ResultType_name, int32(x))
}
func (ResultType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMChat, []int{0} }

type QueryType int32

const (
	QueryType_MOST_OFTEN_YES QueryType = 0
	QueryType_MOST_OFTEN_NO  QueryType = 1
	QueryType_ALL_OF_YES     QueryType = 2
	QueryType_ALL_OF_NO      QueryType = 3
	QueryType_ONE_OF_YES     QueryType = 4
	QueryType_ONE_OF_NO      QueryType = 5
)

var QueryType_name = map[int32]string{
	0: "MOST_OFTEN_YES",
	1: "MOST_OFTEN_NO",
	2: "ALL_OF_YES",
	3: "ALL_OF_NO",
	4: "ONE_OF_YES",
	5: "ONE_OF_NO",
}
var QueryType_value = map[string]int32{
	"MOST_OFTEN_YES": 0,
	"MOST_OFTEN_NO":  1,
	"ALL_OF_YES":     2,
	"ALL_OF_NO":      3,
	"ONE_OF_YES":     4,
	"ONE_OF_NO":      5,
}

func (x QueryType) String() string {
	return proto.EnumName(QueryType_name, int32(x))
}
func (QueryType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMChat, []int{1} }

type Answer struct {
	Result       ResultType `protobuf:"varint,1,opt,name=result,proto3,enum=otsimo.mchat.ResultType" json:"result,omitempty"`
	NextQuestion int32      `protobuf:"varint,2,opt,name=next_question,json=nextQuestion,proto3" json:"next_question,omitempty"`
}

func (m *Answer) Reset()                    { *m = Answer{} }
func (m *Answer) String() string            { return proto.CompactTextString(m) }
func (*Answer) ProtoMessage()               {}
func (*Answer) Descriptor() ([]byte, []int) { return fileDescriptorMChat, []int{0} }

func (m *Answer) GetResult() ResultType {
	if m != nil {
		return m.Result
	}
	return ResultType_PASS
}

func (m *Answer) GetNextQuestion() int32 {
	if m != nil {
		return m.NextQuestion
	}
	return 0
}

type Query struct {
	Group        string     `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Result       ResultType `protobuf:"varint,2,opt,name=result,proto3,enum=otsimo.mchat.ResultType" json:"result,omitempty"`
	NextQuestion int32      `protobuf:"varint,3,opt,name=next_question,json=nextQuestion,proto3" json:"next_question,omitempty"`
	// Actions are ORed
	Actions []QueryType `protobuf:"varint,4,rep,packed,name=actions,enum=otsimo.mchat.QueryType" json:"actions,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptorMChat, []int{1} }

func (m *Query) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *Query) GetResult() ResultType {
	if m != nil {
		return m.Result
	}
	return ResultType_PASS
}

func (m *Query) GetNextQuestion() int32 {
	if m != nil {
		return m.NextQuestion
	}
	return 0
}

func (m *Query) GetActions() []QueryType {
	if m != nil {
		return m.Actions
	}
	return nil
}

type YesNoQuestion struct {
	Yes *Answer `protobuf:"bytes,1,opt,name=yes" json:"yes,omitempty"`
	No  *Answer `protobuf:"bytes,2,opt,name=no" json:"no,omitempty"`
}

func (m *YesNoQuestion) Reset()                    { *m = YesNoQuestion{} }
func (m *YesNoQuestion) String() string            { return proto.CompactTextString(m) }
func (*YesNoQuestion) ProtoMessage()               {}
func (*YesNoQuestion) Descriptor() ([]byte, []int) { return fileDescriptorMChat, []int{2} }

func (m *YesNoQuestion) GetYes() *Answer {
	if m != nil {
		return m.Yes
	}
	return nil
}

func (m *YesNoQuestion) GetNo() *Answer {
	if m != nil {
		return m.No
	}
	return nil
}

type GroupQuestion struct {
	// Keys are question ids, values are the group names
	Questions map[int32]string `protobuf:"bytes,1,rep,name=questions" json:"questions,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Query     []*Query         `protobuf:"bytes,2,rep,name=query" json:"query,omitempty"`
}

func (m *GroupQuestion) Reset()                    { *m = GroupQuestion{} }
func (m *GroupQuestion) String() string            { return proto.CompactTextString(m) }
func (*GroupQuestion) ProtoMessage()               {}
func (*GroupQuestion) Descriptor() ([]byte, []int) { return fileDescriptorMChat, []int{3} }

func (m *GroupQuestion) GetQuestions() map[int32]string {
	if m != nil {
		return m.Questions
	}
	return nil
}

func (m *GroupQuestion) GetQuery() []*Query {
	if m != nil {
		return m.Query
	}
	return nil
}

type Question struct {
	// ID is question number
	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	// Types that are valid to be assigned to Result:
	//	*Question_Yesno
	//	*Question_Group
	Result isQuestion_Result `protobuf_oneof:"result"`
}

func (m *Question) Reset()                    { *m = Question{} }
func (m *Question) String() string            { return proto.CompactTextString(m) }
func (*Question) ProtoMessage()               {}
func (*Question) Descriptor() ([]byte, []int) { return fileDescriptorMChat, []int{4} }

type isQuestion_Result interface {
	isQuestion_Result()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Question_Yesno struct {
	Yesno *YesNoQuestion `protobuf:"bytes,3,opt,name=yesno,oneof"`
}
type Question_Group struct {
	Group *GroupQuestion `protobuf:"bytes,4,opt,name=group,oneof"`
}

func (*Question_Yesno) isQuestion_Result() {}
func (*Question_Group) isQuestion_Result() {}

func (m *Question) GetResult() isQuestion_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *Question) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Question) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Question) GetYesno() *YesNoQuestion {
	if x, ok := m.GetResult().(*Question_Yesno); ok {
		return x.Yesno
	}
	return nil
}

func (m *Question) GetGroup() *GroupQuestion {
	if x, ok := m.GetResult().(*Question_Group); ok {
		return x.Group
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Question) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Question_OneofMarshaler, _Question_OneofUnmarshaler, _Question_OneofSizer, []interface{}{
		(*Question_Yesno)(nil),
		(*Question_Group)(nil),
	}
}

func _Question_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Question)
	// result
	switch x := m.Result.(type) {
	case *Question_Yesno:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Yesno); err != nil {
			return err
		}
	case *Question_Group:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Group); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Question.Result has unexpected type %T", x)
	}
	return nil
}

func _Question_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Question)
	switch tag {
	case 3: // result.yesno
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(YesNoQuestion)
		err := b.DecodeMessage(msg)
		m.Result = &Question_Yesno{msg}
		return true, err
	case 4: // result.group
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GroupQuestion)
		err := b.DecodeMessage(msg)
		m.Result = &Question_Group{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Question_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Question)
	// result
	switch x := m.Result.(type) {
	case *Question_Yesno:
		s := proto.Size(x.Yesno)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Question_Group:
		s := proto.Size(x.Group)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Step struct {
	// ID is step number
	Id            int32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FirstQuestion int32       `protobuf:"varint,2,opt,name=first_question,json=firstQuestion,proto3" json:"first_question,omitempty"`
	Questions     []*Question `protobuf:"bytes,3,rep,name=questions" json:"questions,omitempty"`
}

func (m *Step) Reset()                    { *m = Step{} }
func (m *Step) String() string            { return proto.CompactTextString(m) }
func (*Step) ProtoMessage()               {}
func (*Step) Descriptor() ([]byte, []int) { return fileDescriptorMChat, []int{5} }

func (m *Step) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Step) GetFirstQuestion() int32 {
	if m != nil {
		return m.FirstQuestion
	}
	return 0
}

func (m *Step) GetQuestions() []*Question {
	if m != nil {
		return m.Questions
	}
	return nil
}

func init() {
	proto.RegisterType((*Answer)(nil), "otsimo.mchat.Answer")
	proto.RegisterType((*Query)(nil), "otsimo.mchat.Query")
	proto.RegisterType((*YesNoQuestion)(nil), "otsimo.mchat.YesNoQuestion")
	proto.RegisterType((*GroupQuestion)(nil), "otsimo.mchat.GroupQuestion")
	proto.RegisterType((*Question)(nil), "otsimo.mchat.Question")
	proto.RegisterType((*Step)(nil), "otsimo.mchat.Step")
	proto.RegisterEnum("otsimo.mchat.ResultType", ResultType_name, ResultType_value)
	proto.RegisterEnum("otsimo.mchat.QueryType", QueryType_name, QueryType_value)
}
func (m *Answer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Answer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMChat(dAtA, i, uint64(m.Result))
	}
	if m.NextQuestion != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMChat(dAtA, i, uint64(m.NextQuestion))
	}
	return i, nil
}

func (m *Query) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Query) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Group) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMChat(dAtA, i, uint64(len(m.Group)))
		i += copy(dAtA[i:], m.Group)
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMChat(dAtA, i, uint64(m.Result))
	}
	if m.NextQuestion != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMChat(dAtA, i, uint64(m.NextQuestion))
	}
	if len(m.Actions) > 0 {
		dAtA2 := make([]byte, len(m.Actions)*10)
		var j1 int
		for _, num := range m.Actions {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintMChat(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *YesNoQuestion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YesNoQuestion) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Yes != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMChat(dAtA, i, uint64(m.Yes.Size()))
		n3, err := m.Yes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.No != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMChat(dAtA, i, uint64(m.No.Size()))
		n4, err := m.No.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *GroupQuestion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupQuestion) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Questions) > 0 {
		for k, _ := range m.Questions {
			dAtA[i] = 0xa
			i++
			v := m.Questions[k]
			mapSize := 1 + sovMChat(uint64(k)) + 1 + len(v) + sovMChat(uint64(len(v)))
			i = encodeVarintMChat(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintMChat(dAtA, i, uint64(k))
			dAtA[i] = 0x12
			i++
			i = encodeVarintMChat(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.Query) > 0 {
		for _, msg := range m.Query {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMChat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Question) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Question) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMChat(dAtA, i, uint64(m.Id))
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMChat(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if m.Result != nil {
		nn5, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn5
	}
	return i, nil
}

func (m *Question_Yesno) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Yesno != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMChat(dAtA, i, uint64(m.Yesno.Size()))
		n6, err := m.Yesno.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Question_Group) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Group != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMChat(dAtA, i, uint64(m.Group.Size()))
		n7, err := m.Group.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Step) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Step) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMChat(dAtA, i, uint64(m.Id))
	}
	if m.FirstQuestion != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMChat(dAtA, i, uint64(m.FirstQuestion))
	}
	if len(m.Questions) > 0 {
		for _, msg := range m.Questions {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintMChat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64MChat(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32MChat(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMChat(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Answer) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovMChat(uint64(m.Result))
	}
	if m.NextQuestion != 0 {
		n += 1 + sovMChat(uint64(m.NextQuestion))
	}
	return n
}

func (m *Query) Size() (n int) {
	var l int
	_ = l
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovMChat(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovMChat(uint64(m.Result))
	}
	if m.NextQuestion != 0 {
		n += 1 + sovMChat(uint64(m.NextQuestion))
	}
	if len(m.Actions) > 0 {
		l = 0
		for _, e := range m.Actions {
			l += sovMChat(uint64(e))
		}
		n += 1 + sovMChat(uint64(l)) + l
	}
	return n
}

func (m *YesNoQuestion) Size() (n int) {
	var l int
	_ = l
	if m.Yes != nil {
		l = m.Yes.Size()
		n += 1 + l + sovMChat(uint64(l))
	}
	if m.No != nil {
		l = m.No.Size()
		n += 1 + l + sovMChat(uint64(l))
	}
	return n
}

func (m *GroupQuestion) Size() (n int) {
	var l int
	_ = l
	if len(m.Questions) > 0 {
		for k, v := range m.Questions {
			_ = k
			_ = v
			mapEntrySize := 1 + sovMChat(uint64(k)) + 1 + len(v) + sovMChat(uint64(len(v)))
			n += mapEntrySize + 1 + sovMChat(uint64(mapEntrySize))
		}
	}
	if len(m.Query) > 0 {
		for _, e := range m.Query {
			l = e.Size()
			n += 1 + l + sovMChat(uint64(l))
		}
	}
	return n
}

func (m *Question) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMChat(uint64(m.Id))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovMChat(uint64(l))
	}
	if m.Result != nil {
		n += m.Result.Size()
	}
	return n
}

func (m *Question_Yesno) Size() (n int) {
	var l int
	_ = l
	if m.Yesno != nil {
		l = m.Yesno.Size()
		n += 1 + l + sovMChat(uint64(l))
	}
	return n
}
func (m *Question_Group) Size() (n int) {
	var l int
	_ = l
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovMChat(uint64(l))
	}
	return n
}
func (m *Step) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMChat(uint64(m.Id))
	}
	if m.FirstQuestion != 0 {
		n += 1 + sovMChat(uint64(m.FirstQuestion))
	}
	if len(m.Questions) > 0 {
		for _, e := range m.Questions {
			l = e.Size()
			n += 1 + l + sovMChat(uint64(l))
		}
	}
	return n
}

func sovMChat(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMChat(x uint64) (n int) {
	return sovMChat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Answer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Answer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Answer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (ResultType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextQuestion", wireType)
			}
			m.NextQuestion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextQuestion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Query) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Query: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Query: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (ResultType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextQuestion", wireType)
			}
			m.NextQuestion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextQuestion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMChat
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMChat
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v QueryType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMChat
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (QueryType(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Actions = append(m.Actions, v)
				}
			} else if wireType == 0 {
				var v QueryType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMChat
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (QueryType(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Actions = append(m.Actions, v)
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Actions", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *YesNoQuestion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YesNoQuestion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YesNoQuestion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMChat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Yes == nil {
				m.Yes = &Answer{}
			}
			if err := m.Yes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field No", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMChat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.No == nil {
				m.No = &Answer{}
			}
			if err := m.No.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupQuestion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupQuestion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupQuestion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Questions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMChat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				mapkey |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.Questions == nil {
				m.Questions = make(map[int32]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMChat
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMChat
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthMChat
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Questions[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Questions[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMChat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = append(m.Query, &Query{})
			if err := m.Query[len(m.Query)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Question) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Question: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Question: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yesno", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMChat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &YesNoQuestion{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Result = &Question_Yesno{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMChat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GroupQuestion{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Result = &Question_Group{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Step) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Step: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Step: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstQuestion", wireType)
			}
			m.FirstQuestion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstQuestion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Questions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMChat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Questions = append(m.Questions, &Question{})
			if err := m.Questions[len(m.Questions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMChat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMChat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMChat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMChat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMChat
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMChat
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMChat(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMChat = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMChat   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("m-chat.proto", fileDescriptorMChat) }

var fileDescriptorMChat = []byte{
	// 549 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x54, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xce, 0xfa, 0x4f, 0x9a, 0x4c, 0x62, 0xff, 0xfc, 0x5b, 0x2a, 0x08, 0x20, 0x45, 0x91, 0xf9,
	0xa3, 0x10, 0x89, 0x88, 0xa6, 0x1c, 0x10, 0xe2, 0xe2, 0x4a, 0x09, 0x41, 0x04, 0x9b, 0x6e, 0x72,
	0x29, 0x12, 0xb2, 0xd2, 0x76, 0x81, 0x88, 0xc6, 0xeb, 0x7a, 0x37, 0x50, 0xbf, 0x09, 0x67, 0x2e,
	0xbc, 0x07, 0x27, 0x8e, 0x3c, 0x02, 0x0a, 0x2f, 0x82, 0x76, 0xed, 0xa4, 0xb1, 0x52, 0x2e, 0xdc,
	0x66, 0x67, 0xbe, 0x6f, 0x66, 0xbe, 0x99, 0xd1, 0x42, 0x7d, 0xfe, 0xf0, 0xe4, 0xc3, 0x54, 0x74,
	0xe3, 0x84, 0x09, 0x86, 0xeb, 0x4c, 0xf0, 0xd9, 0x9c, 0x75, 0xe7, 0xd2, 0xe7, 0x86, 0x50, 0xf6,
	0x22, 0xfe, 0x99, 0x26, 0xf8, 0x11, 0x94, 0x13, 0xca, 0x17, 0x67, 0xa2, 0x81, 0x5a, 0xa8, 0x6d,
	0xf7, 0x1a, 0xdd, 0x4d, 0x60, 0x97, 0xa8, 0xd8, 0x24, 0x8d, 0x29, 0xc9, 0x71, 0xf8, 0x0e, 0x58,
	0x11, 0xbd, 0x10, 0xe1, 0xf9, 0x82, 0x72, 0x31, 0x63, 0x51, 0x43, 0x6b, 0xa1, 0xb6, 0x49, 0xea,
	0xd2, 0x79, 0x98, 0xfb, 0xdc, 0x6f, 0x08, 0xcc, 0xc3, 0x05, 0x4d, 0x52, 0xbc, 0x0b, 0xe6, 0xfb,
	0x84, 0x2d, 0x62, 0x95, 0xbf, 0x4a, 0xb2, 0xc7, 0x46, 0x59, 0xed, 0x5f, 0xcb, 0xea, 0xdb, 0x65,
	0xf1, 0x1e, 0xec, 0x4c, 0x4f, 0xa4, 0xc5, 0x1b, 0x46, 0x4b, 0x6f, 0xdb, 0xbd, 0x1b, 0xc5, 0xbc,
	0xaa, 0x25, 0x95, 0x76, 0x85, 0x73, 0xdf, 0x82, 0x75, 0x44, 0xb9, 0xcf, 0xd6, 0x39, 0xee, 0x83,
	0x9e, 0x52, 0xae, 0xda, 0xad, 0xf5, 0x76, 0x8b, 0xfc, 0x6c, 0x68, 0x44, 0x02, 0xf0, 0x5d, 0xd0,
	0x22, 0xa6, 0xda, 0xff, 0x1b, 0x4c, 0x8b, 0x98, 0xfb, 0x1d, 0x81, 0xf5, 0x5c, 0x4a, 0x5e, 0xe7,
	0x1f, 0x42, 0x75, 0xa5, 0x41, 0x56, 0xd1, 0xdb, 0xb5, 0x5e, 0xa7, 0x48, 0x2f, 0xe0, 0xbb, 0x2b,
	0x83, 0xf7, 0x23, 0x91, 0xa4, 0xe4, 0x92, 0x8c, 0x1f, 0x80, 0x79, 0x2e, 0x05, 0x35, 0x34, 0x95,
	0xe5, 0xda, 0x15, 0x5a, 0x49, 0x86, 0xb8, 0xf5, 0x0c, 0xec, 0x62, 0x1e, 0xec, 0x80, 0xfe, 0x91,
	0xa6, 0x4a, 0xa6, 0x49, 0xa4, 0x29, 0x37, 0xf5, 0x69, 0x7a, 0xb6, 0xa0, 0x4a, 0x53, 0x95, 0x64,
	0x8f, 0xa7, 0xda, 0x13, 0xe4, 0x7e, 0x45, 0x50, 0x59, 0xf7, 0x6f, 0x83, 0x36, 0x3b, 0xcd, 0x79,
	0xda, 0xec, 0x14, 0x63, 0x30, 0x04, 0xbd, 0x10, 0x39, 0x4b, 0xd9, 0x78, 0x1f, 0xcc, 0x94, 0xf2,
	0x88, 0xa9, 0x25, 0xd5, 0x7a, 0xb7, 0x8b, 0x9d, 0x15, 0xe6, 0x3d, 0x2c, 0x91, 0x0c, 0x2b, 0x49,
	0xd9, 0xa5, 0x18, 0x57, 0x91, 0x0a, 0x43, 0x91, 0x24, 0x85, 0x3d, 0xa8, 0xac, 0x0e, 0xc9, 0xe5,
	0x60, 0x8c, 0x05, 0x8d, 0xb7, 0xfa, 0xbb, 0x07, 0xf6, 0xbb, 0x59, 0xc2, 0xb7, 0x0e, 0xd6, 0x52,
	0xde, 0xb5, 0xac, 0xc7, 0x9b, 0x6b, 0xd1, 0xd5, 0x40, 0xaf, 0x6f, 0x0d, 0x54, 0x85, 0x37, 0x56,
	0xd0, 0xd9, 0x03, 0xb8, 0xbc, 0x55, 0x5c, 0x01, 0xe3, 0xb5, 0x37, 0x1e, 0x3b, 0x25, 0x69, 0x0d,
	0xbc, 0x17, 0x23, 0x07, 0xe1, 0xff, 0xa0, 0xe6, 0x8d, 0x5f, 0x86, 0x9e, 0x1f, 0x4c, 0x86, 0x7d,
	0xe2, 0x68, 0x9d, 0x18, 0xaa, 0xeb, 0x33, 0xc4, 0x18, 0xec, 0x57, 0xc1, 0x78, 0x12, 0x06, 0x83,
	0x49, 0xdf, 0x0f, 0x8f, 0xfa, 0x92, 0xfb, 0x3f, 0x58, 0x1b, 0x3e, 0x3f, 0x70, 0x10, 0xb6, 0x01,
	0xbc, 0xd1, 0x28, 0x0c, 0x06, 0x0a, 0xa2, 0x61, 0x0b, 0xaa, 0xf9, 0xdb, 0x0f, 0x1c, 0x5d, 0x86,
	0x03, 0xbf, 0xbf, 0x0a, 0x1b, 0x32, 0x9c, 0xbf, 0xfd, 0xc0, 0x31, 0x0f, 0x6e, 0xfe, 0x58, 0x36,
	0xd1, 0xcf, 0x65, 0x13, 0xfd, 0x5a, 0x36, 0xd1, 0x97, 0xdf, 0xcd, 0xd2, 0x9b, 0x1d, 0xa5, 0x28,
	0x3e, 0x3e, 0x2e, 0xab, 0xdf, 0x61, 0xff, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb8, 0x51, 0x39,
	0x27, 0x2d, 0x04, 0x00, 0x00,
}
